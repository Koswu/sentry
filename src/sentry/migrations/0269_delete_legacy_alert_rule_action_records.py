# Generated by Django 2.2.24 on 2022-01-27 00:00

import pickle

from django.db import migrations

from sentry.new_migrations.migrations import CheckedMigration
from sentry.utils.query import RangeQuerySetWrapperWithProgressBar
from sentry.utils.strings import decompress


def delete_metric_alert_trigger_actions_with_alert_rule_actions(apps, schema_editor):
    """
    Delete the rows in the AlertRuleTriggerAction table that use an Alert Rule Action SentryApp.
    """
    AlertRuleTriggerAction = apps.get_model("sentry", "AlertRuleTriggerAction")
    SentryAppComponent = apps.get_model("sentry", "SentryAppComponent")

    for trigger_action in AlertRuleTriggerAction.objects.filter(
        sentry_app_id__in=SentryAppComponent.objects.filter(type="alert-rule-action").values_list(
            "sentry_app_id", flat=True
        ),
        sentry_app_config__isnull=False,
    ):
        trigger_action.delete()


def delete_issue_alerts_with_alert_rule_actions(apps, schema_editor):
    """
    Delete the rows in the Rule table that use an Alert Rule Action SentryApp.
    """
    SentryAppComponent = apps.get_model("sentry", "SentryAppComponent")
    SentryAppInstallation = apps.get_model("sentry", "SentryAppInstallation")
    Project = apps.get_model("sentry", "Project")
    Rule = apps.get("sentry", "Rule")

    # First find all projects by orgs that have the sentryapps with Alert Rule Actions installed
    # Filter sentry_rule table by the affected projects.
    # Unpickle each rule to determine if they have an Alert Rule Action and then delete
    for rule in RangeQuerySetWrapperWithProgressBar(
        Rule.objects.filter(
            project_id__in=Project.objects.filter(
                organization_id__in=SentryAppInstallation.objects.filter(
                    sentry_app_id__in=SentryAppComponent.objects.filter(
                        type="alert-rule-action"
                    ).values_list("id", flat=True)
                ).values_list("organization_id", flat=True)
            ).values_list("id", flat=True)
        )
    ):
        data = pickle.loads(decompress(rule.data))
        alert_rule_actions = [action for action in data["actions"] if action.get("settings")]
        if len(alert_rule_actions):
            rule.delete()


class Migration(CheckedMigration):
    # This flag is used to mark that a migration shouldn't be automatically run in production. For
    # the most part, this should only be used for operations where it's safe to run the migration
    # after your code has deployed. So this should not be used for most operations that alter the
    # schema of a table.
    # Here are some things that make sense to mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that they can
    #   be monitored and not block the deploy for a long period of time while they run.
    # - Adding indexes to large tables. Since this can take a long time, we'd generally prefer to
    #   have ops run this and not block the deploy. Note that while adding an index is a schema
    #   change, it's completely safe to run the operation after the code has deployed.
    is_dangerous = False

    # This flag is used to decide whether to run this migration in a transaction or not. Generally
    # we don't want to run in a transaction here, since for long running operations like data
    # back-fills this results in us locking an increasing number of rows until we finally commit.
    atomic = False

    dependencies = [
        ("sentry", "0268_rename_issue_widget_query_fields"),
    ]

    operations = [
        migrations.RunPython(
            delete_metric_alert_trigger_actions_with_alert_rule_actions,
            migrations.RunPython.noop,
            hints={"tables": ["sentry_alertruletriggeraction", "sentry_sentryappcomponent"]},
        ),
        migrations.RunPython(
            delete_issue_alerts_with_alert_rule_actions,
            migrations.RunPython.noop,
            hints={
                "tables": [
                    "sentry_sentryappcomponent",
                    "sentry_sentryappinstallation",
                    "sentry_project",
                    "sentry_rule",
                ]
            },
        ),
    ]
